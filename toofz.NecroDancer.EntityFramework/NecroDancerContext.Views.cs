//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(toofz.NecroDancer.EntityFramework.NecroDancerContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsff7acc3e438114c33ffb2d8d9854994c92e7b8365331ab35b6412b8efdede3d2))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySetsff7acc3e438114c33ffb2d8d9854994c92e7b8365331ab35b6412b8efdede3d2 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "ff7acc3e438114c33ffb2d8d9854994c92e7b8365331ab35b6412b8efdede3d2"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Item")
            {
                return GetView0();
            }

            if (extentName == "NecroDancerContext.Items")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Enemy")
            {
                return GetView2();
            }

            if (extentName == "NecroDancerContext.Enemies")
            {
                return GetView3();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Item.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Item
        [CodeFirstDatabaseSchema.Item](T1.Item_ElementName, T1.Item_Bouncer, T1.Item_ChestChance, T1.Item_CoinCost, T1.Item_Consumable, T1.Item_Cooldown, T1.Item_Data, T1.Item_DiamondCost, T1.Item_DiamondDealable, T1.[Item.Flyaway_Id], T1.[Item.Flyaway_Text], T1.Item_FrameCount, T1.Item_FromTransmute, T1.Item_HideQuantity, T1.[Item.Hint_Id], T1.[Item.Hint_Text], T1.Item_ImageHeight, T1.Item_ImageWidth, T1.Item_IsArmor, T1.Item_IsAxe, T1.Item_IsBlood, T1.Item_IsBlunderbuss, T1.Item_IsBow, T1.Item_IsBroadsword, T1.Item_IsCat, T1.Item_IsCoin, T1.Item_IsCrossbow, T1.Item_IsCutlass, T1.Item_IsDagger, T1.Item_IsDiamond, T1.Item_IsFamiliar, T1.Item_IsFlail, T1.Item_IsFood, T1.Item_IsFrost, T1.Item_IsGlass, T1.Item_IsGold, T1.Item_IsHarp, T1.Item_IsLongsword, T1.Item_IsMagicFood, T1.Item_IsObsidian, T1.Item_IsPhasing, T1.Item_IsPiercing, T1.Item_IsRapier, T1.Item_IsRifle, T1.Item_IsScroll, T1.Item_IsShovel, T1.Item_IsSpear, T1.Item_IsSpell, T1.Item_IsStackable, T1.Item_IsStaff, T1.Item_IsTemp, T1.Item_IsTitanium, T1.Item_IsTorch, T1.Item_IsWarhammer, T1.Item_IsWeapon, T1.Item_IsWhip, T1.Item_LevelEditor, T1.Item_LockedChestChance, T1.Item_LockedShopChance, T1.Item_OffsetY, T1.Item_PlayerKnockback, T1.Item_Quantity, T1.Item_QuantityYOff, T1.Item_ScreenFlash, T1.Item_ScreenShake, T1.Item_Set, T1.Item_ShopChance, T1.Item_Slot, T1.Item_SlotPriority, T1.Item_Sound, T1.Item_Spell, T1.Item_TemporaryMapSight, T1.Item_Unlocked, T1.Item_UrnChance, T1.Item_UseGreater, T1.Item_ImagePath, T1.Item_Name)
    FROM (
        SELECT 
            T.ElementName AS Item_ElementName, 
            T.Bouncer AS Item_Bouncer, 
            T.ChestChance AS Item_ChestChance, 
            T.CoinCost AS Item_CoinCost, 
            T.Consumable AS Item_Consumable, 
            T.Cooldown AS Item_Cooldown, 
            T.Data AS Item_Data, 
            T.DiamondCost AS Item_DiamondCost, 
            T.DiamondDealable AS Item_DiamondDealable, 
            T.Flyaway.Id AS [Item.Flyaway_Id], 
            T.Flyaway.Text AS [Item.Flyaway_Text], 
            T.FrameCount AS Item_FrameCount, 
            T.FromTransmute AS Item_FromTransmute, 
            T.HideQuantity AS Item_HideQuantity, 
            T.Hint.Id AS [Item.Hint_Id], 
            T.Hint.Text AS [Item.Hint_Text], 
            T.ImageHeight AS Item_ImageHeight, 
            T.ImageWidth AS Item_ImageWidth, 
            T.IsArmor AS Item_IsArmor, 
            T.IsAxe AS Item_IsAxe, 
            T.IsBlood AS Item_IsBlood, 
            T.IsBlunderbuss AS Item_IsBlunderbuss, 
            T.IsBow AS Item_IsBow, 
            T.IsBroadsword AS Item_IsBroadsword, 
            T.IsCat AS Item_IsCat, 
            T.IsCoin AS Item_IsCoin, 
            T.IsCrossbow AS Item_IsCrossbow, 
            T.IsCutlass AS Item_IsCutlass, 
            T.IsDagger AS Item_IsDagger, 
            T.IsDiamond AS Item_IsDiamond, 
            T.IsFamiliar AS Item_IsFamiliar, 
            T.IsFlail AS Item_IsFlail, 
            T.IsFood AS Item_IsFood, 
            T.IsFrost AS Item_IsFrost, 
            T.IsGlass AS Item_IsGlass, 
            T.IsGold AS Item_IsGold, 
            T.IsHarp AS Item_IsHarp, 
            T.IsLongsword AS Item_IsLongsword, 
            T.IsMagicFood AS Item_IsMagicFood, 
            T.IsObsidian AS Item_IsObsidian, 
            T.IsPhasing AS Item_IsPhasing, 
            T.IsPiercing AS Item_IsPiercing, 
            T.IsRapier AS Item_IsRapier, 
            T.IsRifle AS Item_IsRifle, 
            T.IsScroll AS Item_IsScroll, 
            T.IsShovel AS Item_IsShovel, 
            T.IsSpear AS Item_IsSpear, 
            T.IsSpell AS Item_IsSpell, 
            T.IsStackable AS Item_IsStackable, 
            T.IsStaff AS Item_IsStaff, 
            T.IsTemp AS Item_IsTemp, 
            T.IsTitanium AS Item_IsTitanium, 
            T.IsTorch AS Item_IsTorch, 
            T.IsWarhammer AS Item_IsWarhammer, 
            T.IsWeapon AS Item_IsWeapon, 
            T.IsWhip AS Item_IsWhip, 
            T.LevelEditor AS Item_LevelEditor, 
            T.LockedChestChance AS Item_LockedChestChance, 
            T.LockedShopChance AS Item_LockedShopChance, 
            T.OffsetY AS Item_OffsetY, 
            T.PlayerKnockback AS Item_PlayerKnockback, 
            T.Quantity AS Item_Quantity, 
            T.QuantityYOff AS Item_QuantityYOff, 
            T.ScreenFlash AS Item_ScreenFlash, 
            T.ScreenShake AS Item_ScreenShake, 
            T.[Set] AS Item_Set, 
            T.ShopChance AS Item_ShopChance, 
            T.Slot AS Item_Slot, 
            T.SlotPriority AS Item_SlotPriority, 
            T.Sound AS Item_Sound, 
            T.Spell AS Item_Spell, 
            T.TemporaryMapSight AS Item_TemporaryMapSight, 
            T.Unlocked AS Item_Unlocked, 
            T.UrnChance AS Item_UrnChance, 
            T.UseGreater AS Item_UseGreater, 
            T.ImagePath AS Item_ImagePath, 
            T.Name AS Item_Name, 
            True AS _from0
        FROM NecroDancerContext.Items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NecroDancerContext.Items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Items
        [toofz.NecroDancer.EntityFramework.Item](T3.Item_ElementName, T3.Item_Bouncer, T3.Item_ChestChance, T3.Item_CoinCost, T3.Item_Consumable, T3.Item_Cooldown, T3.Item_Data, T3.Item_DiamondCost, T3.Item_DiamondDealable, T3.Item_Flyaway, T3.Item_FrameCount, T3.Item_FromTransmute, T3.Item_HideQuantity, T3.Item_Hint, T3.Item_ImageHeight, T3.Item_ImageWidth, T3.Item_IsArmor, T3.Item_IsAxe, T3.Item_IsBlood, T3.Item_IsBlunderbuss, T3.Item_IsBow, T3.Item_IsBroadsword, T3.Item_IsCat, T3.Item_IsCoin, T3.Item_IsCrossbow, T3.Item_IsCutlass, T3.Item_IsDagger, T3.Item_IsDiamond, T3.Item_IsFamiliar, T3.Item_IsFlail, T3.Item_IsFood, T3.Item_IsFrost, T3.Item_IsGlass, T3.Item_IsGold, T3.Item_IsHarp, T3.Item_IsLongsword, T3.Item_IsMagicFood, T3.Item_IsObsidian, T3.Item_IsPhasing, T3.Item_IsPiercing, T3.Item_IsRapier, T3.Item_IsRifle, T3.Item_IsScroll, T3.Item_IsShovel, T3.Item_IsSpear, T3.Item_IsSpell, T3.Item_IsStackable, T3.Item_IsStaff, T3.Item_IsTemp, T3.Item_IsTitanium, T3.Item_IsTorch, T3.Item_IsWarhammer, T3.Item_IsWeapon, T3.Item_IsWhip, T3.Item_LevelEditor, T3.Item_LockedChestChance, T3.Item_LockedShopChance, T3.Item_OffsetY, T3.Item_PlayerKnockback, T3.Item_Quantity, T3.Item_QuantityYOff, T3.Item_ScreenFlash, T3.Item_ScreenShake, T3.Item_Set, T3.Item_ShopChance, T3.Item_Slot, T3.Item_SlotPriority, T3.Item_Sound, T3.Item_Spell, T3.Item_TemporaryMapSight, T3.Item_Unlocked, T3.Item_UrnChance, T3.Item_UseGreater, T3.Item_ImagePath, T3.Item_Name)
    FROM (
        SELECT -- Constructing Flyaway
            T2.Item_ElementName, 
            T2.Item_Bouncer, 
            T2.Item_ChestChance, 
            T2.Item_CoinCost, 
            T2.Item_Consumable, 
            T2.Item_Cooldown, 
            T2.Item_Data, 
            T2.Item_DiamondCost, 
            T2.Item_DiamondDealable, 
            [toofz.NecroDancer.EntityFramework.DisplayString](T2.Item_Flyaway_Id, T2.Item_Flyaway_Text) AS Item_Flyaway, 
            T2.Item_FrameCount, 
            T2.Item_FromTransmute, 
            T2.Item_HideQuantity, 
            T2.Item_Hint, 
            T2.Item_ImageHeight, 
            T2.Item_ImageWidth, 
            T2.Item_IsArmor, 
            T2.Item_IsAxe, 
            T2.Item_IsBlood, 
            T2.Item_IsBlunderbuss, 
            T2.Item_IsBow, 
            T2.Item_IsBroadsword, 
            T2.Item_IsCat, 
            T2.Item_IsCoin, 
            T2.Item_IsCrossbow, 
            T2.Item_IsCutlass, 
            T2.Item_IsDagger, 
            T2.Item_IsDiamond, 
            T2.Item_IsFamiliar, 
            T2.Item_IsFlail, 
            T2.Item_IsFood, 
            T2.Item_IsFrost, 
            T2.Item_IsGlass, 
            T2.Item_IsGold, 
            T2.Item_IsHarp, 
            T2.Item_IsLongsword, 
            T2.Item_IsMagicFood, 
            T2.Item_IsObsidian, 
            T2.Item_IsPhasing, 
            T2.Item_IsPiercing, 
            T2.Item_IsRapier, 
            T2.Item_IsRifle, 
            T2.Item_IsScroll, 
            T2.Item_IsShovel, 
            T2.Item_IsSpear, 
            T2.Item_IsSpell, 
            T2.Item_IsStackable, 
            T2.Item_IsStaff, 
            T2.Item_IsTemp, 
            T2.Item_IsTitanium, 
            T2.Item_IsTorch, 
            T2.Item_IsWarhammer, 
            T2.Item_IsWeapon, 
            T2.Item_IsWhip, 
            T2.Item_LevelEditor, 
            T2.Item_LockedChestChance, 
            T2.Item_LockedShopChance, 
            T2.Item_OffsetY, 
            T2.Item_PlayerKnockback, 
            T2.Item_Quantity, 
            T2.Item_QuantityYOff, 
            T2.Item_ScreenFlash, 
            T2.Item_ScreenShake, 
            T2.Item_Set, 
            T2.Item_ShopChance, 
            T2.Item_Slot, 
            T2.Item_SlotPriority, 
            T2.Item_Sound, 
            T2.Item_Spell, 
            T2.Item_TemporaryMapSight, 
            T2.Item_Unlocked, 
            T2.Item_UrnChance, 
            T2.Item_UseGreater, 
            T2.Item_ImagePath, 
            T2.Item_Name
        FROM (
            SELECT -- Constructing Hint
                T1.Item_ElementName, 
                T1.Item_Bouncer, 
                T1.Item_ChestChance, 
                T1.Item_CoinCost, 
                T1.Item_Consumable, 
                T1.Item_Cooldown, 
                T1.Item_Data, 
                T1.Item_DiamondCost, 
                T1.Item_DiamondDealable, 
                T1.Item_Flyaway_Id, 
                T1.Item_Flyaway_Text, 
                T1.Item_FrameCount, 
                T1.Item_FromTransmute, 
                T1.Item_HideQuantity, 
                [toofz.NecroDancer.EntityFramework.DisplayString](T1.Item_Hint_Id, T1.Item_Hint_Text) AS Item_Hint, 
                T1.Item_ImageHeight, 
                T1.Item_ImageWidth, 
                T1.Item_IsArmor, 
                T1.Item_IsAxe, 
                T1.Item_IsBlood, 
                T1.Item_IsBlunderbuss, 
                T1.Item_IsBow, 
                T1.Item_IsBroadsword, 
                T1.Item_IsCat, 
                T1.Item_IsCoin, 
                T1.Item_IsCrossbow, 
                T1.Item_IsCutlass, 
                T1.Item_IsDagger, 
                T1.Item_IsDiamond, 
                T1.Item_IsFamiliar, 
                T1.Item_IsFlail, 
                T1.Item_IsFood, 
                T1.Item_IsFrost, 
                T1.Item_IsGlass, 
                T1.Item_IsGold, 
                T1.Item_IsHarp, 
                T1.Item_IsLongsword, 
                T1.Item_IsMagicFood, 
                T1.Item_IsObsidian, 
                T1.Item_IsPhasing, 
                T1.Item_IsPiercing, 
                T1.Item_IsRapier, 
                T1.Item_IsRifle, 
                T1.Item_IsScroll, 
                T1.Item_IsShovel, 
                T1.Item_IsSpear, 
                T1.Item_IsSpell, 
                T1.Item_IsStackable, 
                T1.Item_IsStaff, 
                T1.Item_IsTemp, 
                T1.Item_IsTitanium, 
                T1.Item_IsTorch, 
                T1.Item_IsWarhammer, 
                T1.Item_IsWeapon, 
                T1.Item_IsWhip, 
                T1.Item_LevelEditor, 
                T1.Item_LockedChestChance, 
                T1.Item_LockedShopChance, 
                T1.Item_OffsetY, 
                T1.Item_PlayerKnockback, 
                T1.Item_Quantity, 
                T1.Item_QuantityYOff, 
                T1.Item_ScreenFlash, 
                T1.Item_ScreenShake, 
                T1.Item_Set, 
                T1.Item_ShopChance, 
                T1.Item_Slot, 
                T1.Item_SlotPriority, 
                T1.Item_Sound, 
                T1.Item_Spell, 
                T1.Item_TemporaryMapSight, 
                T1.Item_Unlocked, 
                T1.Item_UrnChance, 
                T1.Item_UseGreater, 
                T1.Item_ImagePath, 
                T1.Item_Name
            FROM (
                SELECT 
                    T.ElementName AS Item_ElementName, 
                    T.Bouncer AS Item_Bouncer, 
                    T.ChestChance AS Item_ChestChance, 
                    T.CoinCost AS Item_CoinCost, 
                    T.Consumable AS Item_Consumable, 
                    T.Cooldown AS Item_Cooldown, 
                    T.Data AS Item_Data, 
                    T.DiamondCost AS Item_DiamondCost, 
                    T.DiamondDealable AS Item_DiamondDealable, 
                    T.Flyaway_Id AS Item_Flyaway_Id, 
                    T.Flyaway_Text AS Item_Flyaway_Text, 
                    T.FrameCount AS Item_FrameCount, 
                    T.FromTransmute AS Item_FromTransmute, 
                    T.HideQuantity AS Item_HideQuantity, 
                    T.Hint_Id AS Item_Hint_Id, 
                    T.Hint_Text AS Item_Hint_Text, 
                    T.ImageHeight AS Item_ImageHeight, 
                    T.ImageWidth AS Item_ImageWidth, 
                    T.IsArmor AS Item_IsArmor, 
                    T.IsAxe AS Item_IsAxe, 
                    T.IsBlood AS Item_IsBlood, 
                    T.IsBlunderbuss AS Item_IsBlunderbuss, 
                    T.IsBow AS Item_IsBow, 
                    T.IsBroadsword AS Item_IsBroadsword, 
                    T.IsCat AS Item_IsCat, 
                    T.IsCoin AS Item_IsCoin, 
                    T.IsCrossbow AS Item_IsCrossbow, 
                    T.IsCutlass AS Item_IsCutlass, 
                    T.IsDagger AS Item_IsDagger, 
                    T.IsDiamond AS Item_IsDiamond, 
                    T.IsFamiliar AS Item_IsFamiliar, 
                    T.IsFlail AS Item_IsFlail, 
                    T.IsFood AS Item_IsFood, 
                    T.IsFrost AS Item_IsFrost, 
                    T.IsGlass AS Item_IsGlass, 
                    T.IsGold AS Item_IsGold, 
                    T.IsHarp AS Item_IsHarp, 
                    T.IsLongsword AS Item_IsLongsword, 
                    T.IsMagicFood AS Item_IsMagicFood, 
                    T.IsObsidian AS Item_IsObsidian, 
                    T.IsPhasing AS Item_IsPhasing, 
                    T.IsPiercing AS Item_IsPiercing, 
                    T.IsRapier AS Item_IsRapier, 
                    T.IsRifle AS Item_IsRifle, 
                    T.IsScroll AS Item_IsScroll, 
                    T.IsShovel AS Item_IsShovel, 
                    T.IsSpear AS Item_IsSpear, 
                    T.IsSpell AS Item_IsSpell, 
                    T.IsStackable AS Item_IsStackable, 
                    T.IsStaff AS Item_IsStaff, 
                    T.IsTemp AS Item_IsTemp, 
                    T.IsTitanium AS Item_IsTitanium, 
                    T.IsTorch AS Item_IsTorch, 
                    T.IsWarhammer AS Item_IsWarhammer, 
                    T.IsWeapon AS Item_IsWeapon, 
                    T.IsWhip AS Item_IsWhip, 
                    T.LevelEditor AS Item_LevelEditor, 
                    T.LockedChestChance AS Item_LockedChestChance, 
                    T.LockedShopChance AS Item_LockedShopChance, 
                    T.OffsetY AS Item_OffsetY, 
                    T.PlayerKnockback AS Item_PlayerKnockback, 
                    T.Quantity AS Item_Quantity, 
                    T.QuantityYOff AS Item_QuantityYOff, 
                    T.ScreenFlash AS Item_ScreenFlash, 
                    T.ScreenShake AS Item_ScreenShake, 
                    T.[Set] AS Item_Set, 
                    T.ShopChance AS Item_ShopChance, 
                    T.Slot AS Item_Slot, 
                    T.SlotPriority AS Item_SlotPriority, 
                    T.Sound AS Item_Sound, 
                    T.Spell AS Item_Spell, 
                    T.TemporaryMapSight AS Item_TemporaryMapSight, 
                    T.Unlocked AS Item_Unlocked, 
                    T.UrnChance AS Item_UrnChance, 
                    T.UseGreater AS Item_UseGreater, 
                    T.ImagePath AS Item_ImagePath, 
                    T.Name AS Item_Name, 
                    True AS _from0
                FROM CodeFirstDatabase.Item AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Enemy.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Enemy
        [CodeFirstDatabaseSchema.Enemy](T1.Enemy_ElementName, T1.Enemy_Type, T1.Enemy_Id, T1.Enemy_FriendlyName, T1.Enemy_LevelEditor, T1.[Enemy.Bouncer_Min], T1.[Enemy.Bouncer_Max], T1.[Enemy.Bouncer_Power], T1.[Enemy.Bouncer_Steps], T1.[Enemy.OptionalStats_Boss], T1.[Enemy.OptionalStats_BounceOnMovementFail], T1.[Enemy.OptionalStats_Floating], T1.[Enemy.OptionalStats_IgnoreLiquids], T1.[Enemy.OptionalStats_IgnoreWalls], T1.[Enemy.OptionalStats_IsMonkeyLike], T1.[Enemy.OptionalStats_Massive], T1.[Enemy.OptionalStats_Miniboss], T1.[Enemy.Particle_HitPath], T1.[Enemy.Shadow_Path], T1.[Enemy.Shadow_OffsetX], T1.[Enemy.Shadow_OffsetY], T1.[Enemy.SpriteSheet_Path], T1.[Enemy.SpriteSheet_FrameCount], T1.[Enemy.SpriteSheet_FrameWidth], T1.[Enemy.SpriteSheet_FrameHeight], T1.[Enemy.SpriteSheet_OffsetX], T1.[Enemy.SpriteSheet_OffsetY], T1.[Enemy.SpriteSheet_OffsetZ], T1.[Enemy.SpriteSheet_HeartOffsetX], T1.[Enemy.SpriteSheet_HeartOffsetY], T1.[Enemy.Stats_BeatsPerMove], T1.[Enemy.Stats_CoinsToDrop], T1.[Enemy.Stats_DamagePerHit], T1.[Enemy.Stats_Health], T1.[Enemy.Stats_Movement], T1.[Enemy.Stats_Priority], T1.[Enemy.Tweens_Move], T1.[Enemy.Tweens_MoveShadow], T1.[Enemy.Tweens_Hit], T1.[Enemy.Tweens_HitShadow], T1.Enemy_Name)
    FROM (
        SELECT 
            T.ElementName AS Enemy_ElementName, 
            T.Type AS Enemy_Type, 
            T.Id AS Enemy_Id, 
            T.FriendlyName AS Enemy_FriendlyName, 
            T.LevelEditor AS Enemy_LevelEditor, 
            T.Bouncer.Min AS [Enemy.Bouncer_Min], 
            T.Bouncer.Max AS [Enemy.Bouncer_Max], 
            T.Bouncer.Power AS [Enemy.Bouncer_Power], 
            T.Bouncer.Steps AS [Enemy.Bouncer_Steps], 
            T.OptionalStats.Boss AS [Enemy.OptionalStats_Boss], 
            T.OptionalStats.BounceOnMovementFail AS [Enemy.OptionalStats_BounceOnMovementFail], 
            T.OptionalStats.Floating AS [Enemy.OptionalStats_Floating], 
            T.OptionalStats.IgnoreLiquids AS [Enemy.OptionalStats_IgnoreLiquids], 
            T.OptionalStats.IgnoreWalls AS [Enemy.OptionalStats_IgnoreWalls], 
            T.OptionalStats.IsMonkeyLike AS [Enemy.OptionalStats_IsMonkeyLike], 
            T.OptionalStats.Massive AS [Enemy.OptionalStats_Massive], 
            T.OptionalStats.Miniboss AS [Enemy.OptionalStats_Miniboss], 
            T.Particle.HitPath AS [Enemy.Particle_HitPath], 
            T.Shadow.Path AS [Enemy.Shadow_Path], 
            T.Shadow.OffsetX AS [Enemy.Shadow_OffsetX], 
            T.Shadow.OffsetY AS [Enemy.Shadow_OffsetY], 
            T.SpriteSheet.Path AS [Enemy.SpriteSheet_Path], 
            T.SpriteSheet.FrameCount AS [Enemy.SpriteSheet_FrameCount], 
            T.SpriteSheet.FrameWidth AS [Enemy.SpriteSheet_FrameWidth], 
            T.SpriteSheet.FrameHeight AS [Enemy.SpriteSheet_FrameHeight], 
            T.SpriteSheet.OffsetX AS [Enemy.SpriteSheet_OffsetX], 
            T.SpriteSheet.OffsetY AS [Enemy.SpriteSheet_OffsetY], 
            T.SpriteSheet.OffsetZ AS [Enemy.SpriteSheet_OffsetZ], 
            T.SpriteSheet.HeartOffsetX AS [Enemy.SpriteSheet_HeartOffsetX], 
            T.SpriteSheet.HeartOffsetY AS [Enemy.SpriteSheet_HeartOffsetY], 
            T.Stats.BeatsPerMove AS [Enemy.Stats_BeatsPerMove], 
            T.Stats.CoinsToDrop AS [Enemy.Stats_CoinsToDrop], 
            T.Stats.DamagePerHit AS [Enemy.Stats_DamagePerHit], 
            T.Stats.Health AS [Enemy.Stats_Health], 
            T.Stats.Movement AS [Enemy.Stats_Movement], 
            T.Stats.Priority AS [Enemy.Stats_Priority], 
            T.Tweens.Move AS [Enemy.Tweens_Move], 
            T.Tweens.MoveShadow AS [Enemy.Tweens_MoveShadow], 
            T.Tweens.Hit AS [Enemy.Tweens_Hit], 
            T.Tweens.HitShadow AS [Enemy.Tweens_HitShadow], 
            T.Name AS Enemy_Name, 
            True AS _from0
        FROM NecroDancerContext.Enemies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NecroDancerContext.Enemies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Enemies
        [toofz.NecroDancer.EntityFramework.Enemy](T8.Enemy_ElementName, T8.Enemy_Type, T8.Enemy_Id, T8.Enemy_FriendlyName, T8.Enemy_LevelEditor, T8.Enemy_Bouncer, T8.Enemy_OptionalStats, T8.Enemy_Particle, T8.Enemy_Shadow, T8.Enemy_SpriteSheet, T8.Enemy_Stats, T8.Enemy_Tweens, T8.Enemy_Name)
    FROM (
        SELECT -- Constructing Bouncer
            T7.Enemy_ElementName, 
            T7.Enemy_Type, 
            T7.Enemy_Id, 
            T7.Enemy_FriendlyName, 
            T7.Enemy_LevelEditor, 
            [toofz.NecroDancer.EntityFramework.Bouncer](T7.Enemy_Bouncer_Min, T7.Enemy_Bouncer_Max, T7.Enemy_Bouncer_Power, T7.Enemy_Bouncer_Steps) AS Enemy_Bouncer, 
            T7.Enemy_OptionalStats, 
            T7.Enemy_Particle, 
            T7.Enemy_Shadow, 
            T7.Enemy_SpriteSheet, 
            T7.Enemy_Stats, 
            T7.Enemy_Tweens, 
            T7.Enemy_Name
        FROM (
            SELECT -- Constructing OptionalStats
                T6.Enemy_ElementName, 
                T6.Enemy_Type, 
                T6.Enemy_Id, 
                T6.Enemy_FriendlyName, 
                T6.Enemy_LevelEditor, 
                T6.Enemy_Bouncer_Min, 
                T6.Enemy_Bouncer_Max, 
                T6.Enemy_Bouncer_Power, 
                T6.Enemy_Bouncer_Steps, 
                [toofz.NecroDancer.EntityFramework.OptionalStats](T6.Enemy_OptionalStats_Boss, T6.Enemy_OptionalStats_BounceOnMovementFail, T6.Enemy_OptionalStats_Floating, T6.Enemy_OptionalStats_IgnoreLiquids, T6.Enemy_OptionalStats_IgnoreWalls, T6.Enemy_OptionalStats_IsMonkeyLike, T6.Enemy_OptionalStats_Massive, T6.Enemy_OptionalStats_Miniboss) AS Enemy_OptionalStats, 
                T6.Enemy_Particle, 
                T6.Enemy_Shadow, 
                T6.Enemy_SpriteSheet, 
                T6.Enemy_Stats, 
                T6.Enemy_Tweens, 
                T6.Enemy_Name
            FROM (
                SELECT -- Constructing Particle
                    T5.Enemy_ElementName, 
                    T5.Enemy_Type, 
                    T5.Enemy_Id, 
                    T5.Enemy_FriendlyName, 
                    T5.Enemy_LevelEditor, 
                    T5.Enemy_Bouncer_Min, 
                    T5.Enemy_Bouncer_Max, 
                    T5.Enemy_Bouncer_Power, 
                    T5.Enemy_Bouncer_Steps, 
                    T5.Enemy_OptionalStats_Boss, 
                    T5.Enemy_OptionalStats_BounceOnMovementFail, 
                    T5.Enemy_OptionalStats_Floating, 
                    T5.Enemy_OptionalStats_IgnoreLiquids, 
                    T5.Enemy_OptionalStats_IgnoreWalls, 
                    T5.Enemy_OptionalStats_IsMonkeyLike, 
                    T5.Enemy_OptionalStats_Massive, 
                    T5.Enemy_OptionalStats_Miniboss, 
                    [toofz.NecroDancer.EntityFramework.Particle](T5.Enemy_Particle_HitPath) AS Enemy_Particle, 
                    T5.Enemy_Shadow, 
                    T5.Enemy_SpriteSheet, 
                    T5.Enemy_Stats, 
                    T5.Enemy_Tweens, 
                    T5.Enemy_Name
                FROM (
                    SELECT -- Constructing Shadow
                        T4.Enemy_ElementName, 
                        T4.Enemy_Type, 
                        T4.Enemy_Id, 
                        T4.Enemy_FriendlyName, 
                        T4.Enemy_LevelEditor, 
                        T4.Enemy_Bouncer_Min, 
                        T4.Enemy_Bouncer_Max, 
                        T4.Enemy_Bouncer_Power, 
                        T4.Enemy_Bouncer_Steps, 
                        T4.Enemy_OptionalStats_Boss, 
                        T4.Enemy_OptionalStats_BounceOnMovementFail, 
                        T4.Enemy_OptionalStats_Floating, 
                        T4.Enemy_OptionalStats_IgnoreLiquids, 
                        T4.Enemy_OptionalStats_IgnoreWalls, 
                        T4.Enemy_OptionalStats_IsMonkeyLike, 
                        T4.Enemy_OptionalStats_Massive, 
                        T4.Enemy_OptionalStats_Miniboss, 
                        T4.Enemy_Particle_HitPath, 
                        [toofz.NecroDancer.EntityFramework.Shadow](T4.Enemy_Shadow_Path, T4.Enemy_Shadow_OffsetX, T4.Enemy_Shadow_OffsetY) AS Enemy_Shadow, 
                        T4.Enemy_SpriteSheet, 
                        T4.Enemy_Stats, 
                        T4.Enemy_Tweens, 
                        T4.Enemy_Name
                    FROM (
                        SELECT -- Constructing SpriteSheet
                            T3.Enemy_ElementName, 
                            T3.Enemy_Type, 
                            T3.Enemy_Id, 
                            T3.Enemy_FriendlyName, 
                            T3.Enemy_LevelEditor, 
                            T3.Enemy_Bouncer_Min, 
                            T3.Enemy_Bouncer_Max, 
                            T3.Enemy_Bouncer_Power, 
                            T3.Enemy_Bouncer_Steps, 
                            T3.Enemy_OptionalStats_Boss, 
                            T3.Enemy_OptionalStats_BounceOnMovementFail, 
                            T3.Enemy_OptionalStats_Floating, 
                            T3.Enemy_OptionalStats_IgnoreLiquids, 
                            T3.Enemy_OptionalStats_IgnoreWalls, 
                            T3.Enemy_OptionalStats_IsMonkeyLike, 
                            T3.Enemy_OptionalStats_Massive, 
                            T3.Enemy_OptionalStats_Miniboss, 
                            T3.Enemy_Particle_HitPath, 
                            T3.Enemy_Shadow_Path, 
                            T3.Enemy_Shadow_OffsetX, 
                            T3.Enemy_Shadow_OffsetY, 
                            [toofz.NecroDancer.EntityFramework.SpriteSheet](T3.Enemy_SpriteSheet_Path, T3.Enemy_SpriteSheet_FrameCount, T3.Enemy_SpriteSheet_FrameWidth, T3.Enemy_SpriteSheet_FrameHeight, T3.Enemy_SpriteSheet_OffsetX, T3.Enemy_SpriteSheet_OffsetY, T3.Enemy_SpriteSheet_OffsetZ, T3.Enemy_SpriteSheet_HeartOffsetX, T3.Enemy_SpriteSheet_HeartOffsetY) AS Enemy_SpriteSheet, 
                            T3.Enemy_Stats, 
                            T3.Enemy_Tweens, 
                            T3.Enemy_Name
                        FROM (
                            SELECT -- Constructing Stats
                                T2.Enemy_ElementName, 
                                T2.Enemy_Type, 
                                T2.Enemy_Id, 
                                T2.Enemy_FriendlyName, 
                                T2.Enemy_LevelEditor, 
                                T2.Enemy_Bouncer_Min, 
                                T2.Enemy_Bouncer_Max, 
                                T2.Enemy_Bouncer_Power, 
                                T2.Enemy_Bouncer_Steps, 
                                T2.Enemy_OptionalStats_Boss, 
                                T2.Enemy_OptionalStats_BounceOnMovementFail, 
                                T2.Enemy_OptionalStats_Floating, 
                                T2.Enemy_OptionalStats_IgnoreLiquids, 
                                T2.Enemy_OptionalStats_IgnoreWalls, 
                                T2.Enemy_OptionalStats_IsMonkeyLike, 
                                T2.Enemy_OptionalStats_Massive, 
                                T2.Enemy_OptionalStats_Miniboss, 
                                T2.Enemy_Particle_HitPath, 
                                T2.Enemy_Shadow_Path, 
                                T2.Enemy_Shadow_OffsetX, 
                                T2.Enemy_Shadow_OffsetY, 
                                T2.Enemy_SpriteSheet_Path, 
                                T2.Enemy_SpriteSheet_FrameCount, 
                                T2.Enemy_SpriteSheet_FrameWidth, 
                                T2.Enemy_SpriteSheet_FrameHeight, 
                                T2.Enemy_SpriteSheet_OffsetX, 
                                T2.Enemy_SpriteSheet_OffsetY, 
                                T2.Enemy_SpriteSheet_OffsetZ, 
                                T2.Enemy_SpriteSheet_HeartOffsetX, 
                                T2.Enemy_SpriteSheet_HeartOffsetY, 
                                [toofz.NecroDancer.EntityFramework.Stats](T2.Enemy_Stats_BeatsPerMove, T2.Enemy_Stats_CoinsToDrop, T2.Enemy_Stats_DamagePerHit, T2.Enemy_Stats_Health, T2.Enemy_Stats_Movement, T2.Enemy_Stats_Priority) AS Enemy_Stats, 
                                T2.Enemy_Tweens, 
                                T2.Enemy_Name
                            FROM (
                                SELECT -- Constructing Tweens
                                    T1.Enemy_ElementName, 
                                    T1.Enemy_Type, 
                                    T1.Enemy_Id, 
                                    T1.Enemy_FriendlyName, 
                                    T1.Enemy_LevelEditor, 
                                    T1.Enemy_Bouncer_Min, 
                                    T1.Enemy_Bouncer_Max, 
                                    T1.Enemy_Bouncer_Power, 
                                    T1.Enemy_Bouncer_Steps, 
                                    T1.Enemy_OptionalStats_Boss, 
                                    T1.Enemy_OptionalStats_BounceOnMovementFail, 
                                    T1.Enemy_OptionalStats_Floating, 
                                    T1.Enemy_OptionalStats_IgnoreLiquids, 
                                    T1.Enemy_OptionalStats_IgnoreWalls, 
                                    T1.Enemy_OptionalStats_IsMonkeyLike, 
                                    T1.Enemy_OptionalStats_Massive, 
                                    T1.Enemy_OptionalStats_Miniboss, 
                                    T1.Enemy_Particle_HitPath, 
                                    T1.Enemy_Shadow_Path, 
                                    T1.Enemy_Shadow_OffsetX, 
                                    T1.Enemy_Shadow_OffsetY, 
                                    T1.Enemy_SpriteSheet_Path, 
                                    T1.Enemy_SpriteSheet_FrameCount, 
                                    T1.Enemy_SpriteSheet_FrameWidth, 
                                    T1.Enemy_SpriteSheet_FrameHeight, 
                                    T1.Enemy_SpriteSheet_OffsetX, 
                                    T1.Enemy_SpriteSheet_OffsetY, 
                                    T1.Enemy_SpriteSheet_OffsetZ, 
                                    T1.Enemy_SpriteSheet_HeartOffsetX, 
                                    T1.Enemy_SpriteSheet_HeartOffsetY, 
                                    T1.Enemy_Stats_BeatsPerMove, 
                                    T1.Enemy_Stats_CoinsToDrop, 
                                    T1.Enemy_Stats_DamagePerHit, 
                                    T1.Enemy_Stats_Health, 
                                    T1.Enemy_Stats_Movement, 
                                    T1.Enemy_Stats_Priority, 
                                    [toofz.NecroDancer.EntityFramework.Tweens](T1.Enemy_Tweens_Move, T1.Enemy_Tweens_MoveShadow, T1.Enemy_Tweens_Hit, T1.Enemy_Tweens_HitShadow) AS Enemy_Tweens, 
                                    T1.Enemy_Name
                                FROM (
                                    SELECT 
                                        T.ElementName AS Enemy_ElementName, 
                                        T.Type AS Enemy_Type, 
                                        T.Id AS Enemy_Id, 
                                        T.FriendlyName AS Enemy_FriendlyName, 
                                        T.LevelEditor AS Enemy_LevelEditor, 
                                        T.Bouncer_Min AS Enemy_Bouncer_Min, 
                                        T.Bouncer_Max AS Enemy_Bouncer_Max, 
                                        T.Bouncer_Power AS Enemy_Bouncer_Power, 
                                        T.Bouncer_Steps AS Enemy_Bouncer_Steps, 
                                        T.OptionalStats_Boss AS Enemy_OptionalStats_Boss, 
                                        T.OptionalStats_BounceOnMovementFail AS Enemy_OptionalStats_BounceOnMovementFail, 
                                        T.OptionalStats_Floating AS Enemy_OptionalStats_Floating, 
                                        T.OptionalStats_IgnoreLiquids AS Enemy_OptionalStats_IgnoreLiquids, 
                                        T.OptionalStats_IgnoreWalls AS Enemy_OptionalStats_IgnoreWalls, 
                                        T.OptionalStats_IsMonkeyLike AS Enemy_OptionalStats_IsMonkeyLike, 
                                        T.OptionalStats_Massive AS Enemy_OptionalStats_Massive, 
                                        T.OptionalStats_Miniboss AS Enemy_OptionalStats_Miniboss, 
                                        T.Particle_HitPath AS Enemy_Particle_HitPath, 
                                        T.Shadow_Path AS Enemy_Shadow_Path, 
                                        T.Shadow_OffsetX AS Enemy_Shadow_OffsetX, 
                                        T.Shadow_OffsetY AS Enemy_Shadow_OffsetY, 
                                        T.SpriteSheet_Path AS Enemy_SpriteSheet_Path, 
                                        T.SpriteSheet_FrameCount AS Enemy_SpriteSheet_FrameCount, 
                                        T.SpriteSheet_FrameWidth AS Enemy_SpriteSheet_FrameWidth, 
                                        T.SpriteSheet_FrameHeight AS Enemy_SpriteSheet_FrameHeight, 
                                        T.SpriteSheet_OffsetX AS Enemy_SpriteSheet_OffsetX, 
                                        T.SpriteSheet_OffsetY AS Enemy_SpriteSheet_OffsetY, 
                                        T.SpriteSheet_OffsetZ AS Enemy_SpriteSheet_OffsetZ, 
                                        T.SpriteSheet_HeartOffsetX AS Enemy_SpriteSheet_HeartOffsetX, 
                                        T.SpriteSheet_HeartOffsetY AS Enemy_SpriteSheet_HeartOffsetY, 
                                        T.Stats_BeatsPerMove AS Enemy_Stats_BeatsPerMove, 
                                        T.Stats_CoinsToDrop AS Enemy_Stats_CoinsToDrop, 
                                        T.Stats_DamagePerHit AS Enemy_Stats_DamagePerHit, 
                                        T.Stats_Health AS Enemy_Stats_Health, 
                                        T.Stats_Movement AS Enemy_Stats_Movement, 
                                        T.Stats_Priority AS Enemy_Stats_Priority, 
                                        T.Tweens_Move AS Enemy_Tweens_Move, 
                                        T.Tweens_MoveShadow AS Enemy_Tweens_MoveShadow, 
                                        T.Tweens_Hit AS Enemy_Tweens_Hit, 
                                        T.Tweens_HitShadow AS Enemy_Tweens_HitShadow, 
                                        T.Name AS Enemy_Name, 
                                        True AS _from0
                                    FROM CodeFirstDatabase.Enemy AS T
                                ) AS T1
                            ) AS T2
                        ) AS T3
                    ) AS T4
                ) AS T5
            ) AS T6
        ) AS T7
    ) AS T8");
        }
    }
}
